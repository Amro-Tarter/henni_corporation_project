rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isValidRole() {
      let role = request.resource.data.role;
      return role in ['participant', 'family', 'staff', 'mentor', 'admin'];
    }

    function hasValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'role', 'is_active']) &&
        request.resource.data.email is string &&
        request.resource.data.role is string &&
        request.resource.data.is_active is bool;
    }

    // âœ… Specific access for your collections
    match /elemental_projects/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /events/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /team/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // â”€â”€ Users collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /users/{userId} {
      allow read: if true;
      
      // Allow creating new users with proper validation
      allow create: if isAuthenticated() &&
        hasValidUserData() &&
        isValidRole() &&
        request.resource.data.is_active == false;
      
      // Allow users to update their own data if not active
      allow update: if request.auth.uid == userId &&
        (!resource.data.is_active || !request.resource.data.is_active);
      
      // Allow admins to update any user
      allow update: if isAdmin();
      
      // Allow admins to delete users
      allow delete: if isAdmin();
    }

    // â”€â”€ Participants collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /participants/{userId} {
      allow read: if true;
      
      // Allow creating participant document for new users
      allow create: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'participant';
      
      // Allow users to update their own participant data
      allow update: if request.auth.uid == userId;
      
      // Allow admins to update any participant
      allow update: if isAdmin();
      
      // Allow admins to delete participants
      allow delete: if isAdmin();
    }

    // â”€â”€ Family collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /family/{userId} {
      allow read: if true;
      
      // Allow creating family document for new users
      allow create: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'family';
      
      // Allow users to update their own family data
      allow update: if request.auth.uid == userId;
      
      // Allow admins to update any family member
      allow update: if isAdmin();
      
      // Allow admins to delete family members
      allow delete: if isAdmin();
    }

    // â”€â”€ Staff collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /staff/{userId} {
      allow read: if true;
      
      // Allow creating staff document for new users
      allow create: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'staff';
      
      // Allow users to update their own staff data
      allow update: if request.auth.uid == userId;
      
      // Allow admins to update any staff member
      allow update: if isAdmin();
      
      // Allow admins to delete staff members
      allow delete: if isAdmin();
    }

    // â”€â”€ Mentors collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /mentors/{userId} {
      allow read: if true;
      
      // Allow creating mentor document for new users
      allow create: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(userId)).data.userType == 'mentor';
      
      // Allow users to update their own mentor data
      allow update: if request.auth.uid == userId;
      
      // Allow admins to update any mentor
      allow update: if isAdmin();
      
      // Allow admins to delete mentors
      allow delete: if isAdmin();
    }

    // â”€â”€ Posts collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /posts/{postId} {
      allow read: if true;
      allow write: if isAuthenticated();
      
      match /comments/{commentId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }

    // â”€â”€ Conversations & messages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /conversations/{convoId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      
      match /messages/{msgId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }
    }

    // â”€â”€ Profiles collection â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /profiles/{userId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    // ðŸš« Default deny fallback
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// AFTER UPDATING RUN THIS: firebase deploy --only firestore:rules
